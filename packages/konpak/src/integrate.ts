import { execSync, spawnSync } from "node:child_process";
import { mkdirSync, unlinkSync, writeFileSync } from "node:fs";
import { tmpdir } from "node:os";
import { dirname, join, normalize } from "node:path";
import { INSTALLATION_DIR } from "shared/client";
import type { KONBINI_MANIFEST } from "shared/types/manifest";

function runElevatedScript(scriptContent: string) {
    const tmpFile = normalize(join(tmpdir(), `temp_script_${Date.now()}.ps1`));

    writeFileSync(tmpFile, scriptContent);

    const command = `Start-Process powershell -Verb runAs -Wait -ArgumentList '-NoProfile', '-ExecutionPolicy', 'Bypass', '-File', '${tmpFile}'`;

    spawnSync("powershell", ["-NoProfile", "-Command", command], { stdio: "inherit" });

    setTimeout(() => {
        try {
            unlinkSync(tmpFile);
        } catch {}
    }, 1500);

    return true;
}

const exePath = join(INSTALLATION_DIR, "kbi");
const script = `
# register the extension
New-Item -Path "Registry::HKEY_CLASSES_ROOT\\.kpak" -Force | Out-Null
Set-ItemProperty -Path "Registry::HKEY_CLASSES_ROOT\\.kpak" -Name "(default)" -Value "konpak"
Set-ItemProperty -Path "Registry::HKEY_CLASSES_ROOT\\.kpak" -Name "Content Type" -Value "application/x-kpak"
Set-ItemProperty -Path "Registry::HKEY_CLASSES_ROOT\\.kpak" -Name "PerceivedType" -Value "compressed"

# register the filetype
New-Item -Path "Registry::HKEY_CLASSES_ROOT\\konpak" -Force | Out-Null
Set-ItemProperty -Path "Registry::HKEY_CLASSES_ROOT\\konpak" -Name "(default)" -Value "Konpak archive"

# default icon
New-Item -Path "Registry::HKEY_CLASSES_ROOT\\konpak\\DefaultIcon" -Force | Out-Null
Set-ItemProperty -Path "Registry::HKEY_CLASSES_ROOT\\konpak\\DefaultIcon" -Name "(default)" -Value "${exePath},0"

# be able to install it from right click menu
New-Item -Path "Registry::HKEY_CLASSES_ROOT\\konpak\\shell\\open" -Force | Out-Null
Set-ItemProperty -Path "Registry::HKEY_CLASSES_ROOT\\konpak\\shell\\open" -Name "(default)" -Value "Install Konpak"
New-Item -Path "Registry::HKEY_CLASSES_ROOT\\konpak\\shell\\open\\command" -Force | Out-Null
Set-ItemProperty -Path "Registry::HKEY_CLASSES_ROOT\\konpak\\shell\\open\\command" -Name "(default)" -Value "${exePath} unpack \\"%1\\""
`;

export function registerKonpakForWindows() {
    const path = join(tmpdir(), `temp_script_${Date.now()}.ps1`);
    writeFileSync(
        path,
        `
try {
    Get-ItemPropertyValue -Path "Registry::HKEY_CLASSES_ROOT\\.kpak" -Name "(default)" -ErrorAction Stop
    Write-Output 0
} catch {
    Write-Output 1
}
`,
    );

    const out = execSync(`powershell -File "${path}"`, { encoding: "utf-8" });

    if (out.toString().trim() === "1") runElevatedScript(script);
}

interface Params {
    appId: string;
    version: string;
    appName: string;
    publisher: string;
    installPath: string;
    manifest: KONBINI_MANIFEST;
}

export interface WindowsParams extends Params {}

function IntegrateWindows(params: WindowsParams) {
    const { appName, appId, version, publisher, installPath, manifest } = params;

    const regPath = `HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\${appId}`;
    const lnkPath = `${process.env["APPDATA"]}\\Microsoft\\Windows\\Start Menu\\Programs\\${appId}.lnk`;

    const CMD: string[] = [];

    CMD.push(`New-Item -Path "${regPath}" -Force`);

    const appExePath = join(installPath, `${appId}.exe`);
    const iconFilePath = join(installPath, `${appId}.ico`);
    const uninstallerScriptFilePath = join(installPath, "uninstall.ps1");

    const values: Record<string, string | number> = {
        DisplayName: appName,
        DisplayVersion: version,
        Publisher: publisher,
        InstallLocation: appExePath,
        UninstallString: uninstallerScriptFilePath + ".bat",
        DisplayIcon: iconFilePath,
        EstimatedSize: 3000, // in KB
        NoModify: 1,
        NoRepair: 1,
    };

    for (const [key, val] of Object.entries(values)) {
        const isDword = typeof val === "number";
        CMD.push(
            `Set-ItemProperty -Path "${regPath}" -Name "${key}" ${isDword ? `-Type DWord -Value ${val}` : `-Value "${val}"`}`,
        );
    }

    `
$WshShell = New-Object -ComObject WScript.Shell;
$Shortcut = $WshShell.CreateShortcut('${lnkPath}');
$Shortcut.TargetPath = '${appExePath}';
$Shortcut.Description = '${manifest.slogan}';
$Shortcut.IconLocation = '${iconFilePath},0';
$Shortcut.Save();
    `
        .split("\n")
        .forEach((s) => CMD.push(s));

    CMD.push(
        `
# self-destruct
Start-Sleep -Milliseconds 200
Remove-Item -Path $MyInvocation.MyCommand.Path -Force
            `,
    );

    mkdirSync(dirname(uninstallerScriptFilePath), { recursive: true });

    writeFileSync(
        uninstallerScriptFilePath,
        `
# uninstaller generated by Konpak (Konbini's installer software)
Write-Output "Removing ${appName}"
Remove-Item -Path "${regPath}" -Recurse -Force
Remove-Item -Path "${lnkPath}" -Force
Start-Sleep -Milliseconds 200
Remove-Item -Path "${installPath}" -Recurse -Force
`,
    );

    // oh man do i hate windows...
    writeFileSync(
        uninstallerScriptFilePath + ".bat",
        `
:: uninstaller generated by Konpak (Konbini's installer software)
@echo off
:: launch the actual uninstaller in (elevated) powershell session
powershell.exe -NoProfile -ExecutionPolicy Bypass -Command ^
  "Start-Process PowerShell -ArgumentList '-ExecutionPolicy Bypass -File \"${uninstallerScriptFilePath}\"' -Verb RunAs"
`,
    );

    runElevatedScript(CMD.join("\n"));
}

export interface LinuxParams extends Params {
    comment: string;
    categories: string;
    isCli: boolean;
}

function IntegrateLinux(params: LinuxParams) {
    const { appId, appName, installPath, comment = "", categories = "Utility", isCli } = params;

    const desktopEntry = `[Desktop Entry]
Name=${appName}
Exec=${join(installPath, appId)}
Icon=${join(installPath, `${appId}.png`)}
Type=Application
Categories=${categories};
Comment=${comment}
Terminal=${String(isCli)}
`;

    const userApplicationsPath = `${process.env["HOME"]}/.local/share/applications`;
    const desktopFilePath = `${userApplicationsPath}/${appId}.desktop`;

    mkdirSync(userApplicationsPath, { recursive: true });

    writeFileSync(desktopFilePath, desktopEntry, { mode: 0o755 });

    // update app database (optional)
    try {
        execSync(`update-desktop-database ${userApplicationsPath}`);
    } catch {
        // nothing wrong if it ain't installed or it fails, it's not important
    }
}

/** Integrates the app so that the OS recognizes it as an installed app.
 * Global installs only.
 */
export function IntegrateApp(params: WindowsParams | LinuxParams) {
    if (process.platform === "win32") IntegrateWindows(params as WindowsParams);
    if (process.platform === "linux") IntegrateLinux(params as LinuxParams);
}
